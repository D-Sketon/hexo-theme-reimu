<%- js({ src: vendorCdn(theme.vendor.js.lazysizes)[0], integrity: vendorCdnIntegrity(theme.vendor.js.lazysizes)[0], crossorigin: "anonymous"}) %>
<%- js({ src: vendorCdn(theme.vendor.js.clipboard)[0], integrity: vendorCdnIntegrity(theme.vendor.js.clipboard)[0], crossorigin: "anonymous"}) %>

<%- js('js/script.js') %>

<% if (theme.animation.enable) { %>
  <%- js('js/aos.js') %>
  <script>
    var aosInit = () => {
      AOS.init({
        duration: 1000,
        easing: "ease",
        once: true,
        offset: 50,
      });
    };
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', aosInit);
    } else {
      aosInit();
    }
  </script>
<% } %>

<%- js({src: 'js/pjax_script.js', 'data-pjax': true}) %>

<% if (theme.generator_search.enable) { %>
  <%- js({src: 'js/generator_search.js', defer: true}) %>
<% } %>

<% if (theme.algolia_search.enable) { %>
  <script>
    var ALGOLIA_CONFIG = {
      logo: "<%- url_for('/images/algolia_logo.svg', { relative: false }) %>",
      algolia: {
        applicationID: "<%= config.algolia.appId %>",
        apiKey: "<%= config.algolia.apiKey %>",
        indexName: "<%= config.algolia.indexName %>",
        hits: {
          "per_page": parseInt("<%= theme.algolia_search.hits.per_page %>")
        },
        labels: {
          "input_placeholder": "<%= theme.algolia_search.labels.input_placeholder %>",
          "hits_empty": "<%= theme.algolia_search.labels.hits_empty %>",
          "hits_stats": "<%= theme.algolia_search.labels.hits_stats %>"
        }
      }
    };
  </script>
  <%- js({src: vendorCdn(theme.vendor.js.algolia)[0], integrity: vendorCdnIntegrity(theme.vendor.js.algolia)[0], crossorigin: "anonymous", defer: true}) %>
  <%- js({src: vendorCdn(theme.vendor.js.instantsearch)[0], integrity: vendorCdnIntegrity(theme.vendor.js.instantsearch)[0], crossorigin: "anonymous", defer: true}) %>
  <%- js({src: 'js/algolia_search.js', defer: true}) %>
<% } %>

<% if (theme.firework.enable) { %>
  <%- js({src: vendorCdn(theme.vendor.js.firework)[0], integrity: vendorCdnIntegrity(theme.vendor.js.firework)[0], crossorigin: "anonymous"}) %>
  <script>
    window.firework && window.firework(JSON.parse('<%- JSON.stringify(theme.firework.options) %>'))
  </script>
<% } %>

<% if (theme.pjax.enable) { %>
  <%- js({src: vendorCdn(theme.vendor.js.pjax)[0], integrity: vendorCdnIntegrity(theme.vendor.js.pjax)[0], crossorigin: "anonymous"}) %>
  <script>
    function loadScripts(scripts, index) {
      if (index < scripts.length) {
        const script = scripts[index];
        const src = script.getAttribute('src');

        const loadScript = (scriptContent) => {
          return new Promise((resolve, reject) => {
            const scriptElement = document.createElement('script');
            if (script.type) {
              scriptElement.type = script.type;
            }
            if (script.src) {
              scriptElement.src = script.src;
              scriptElement.onload = resolve;
              scriptElement.onerror = reject;
            }
            if (scriptContent) {
              scriptElement.text = scriptContent;
            }
            document.head.appendChild(scriptElement);
            if (!script.src) {
              resolve();
            }
          })
          
        }

        ;(src ? loadScript() : loadScript(script.text))
          .then(() => loadScripts(scripts, index + 1))
          .catch(error => {
            console.error(`Failed to load script: ${src || 'inline script'}`, error);
            loadScripts(scripts, index + 1);
          });
      }
    }
    if (window.Pjax) {
      Pjax.prototype.getElements = function() {
        const i18nLanguages = window.REIMU_CONFIG.i18n_languages;
        const baseUrl = window.REIMU_CONFIG.base;
        let basePathname = new URL(baseUrl).pathname;
        if (!basePathname.endsWith('/')) {
          basePathname += '/';  
        }
        const currentUrl = window.location.href;
        const currentPathname = new URL(currentUrl).pathname.replace(basePathname, '');
        const aLinks = document.querySelectorAll('a[href]');
        const pjaxLinks = [];
        for(let i = 0; i < aLinks.length; i++) {
          const aLink = aLinks[i];
          const aLinkHref = aLink.getAttribute('href');
          const isExternal = aLink.getAttribute('target') === '_blank' || aLink.getAttribute('rel')?.includes('noopener');
          if (isExternal || aLinkHref.startsWith('mailto:') || aLinkHref.startsWith('tel:') || aLinkHref.startsWith('javascript:') || aLinkHref.startsWith("data:") || aLinkHref.startsWith("vbscript:")) {
            continue;
          }
          if (!i18nLanguages) {
            // 多语言功能未打开
            pjaxLinks.push(aLink);
            continue;
          }

          const absoluteUrl = new URL(aLinkHref, currentUrl).href;
          const absolutePathname = new URL(absoluteUrl).pathname.replace(basePathname, '');

          if (!absolutePathname || !currentPathname) {
            pjaxLinks.push(aLink);
            continue;
          }

          const currentLangIndex = i18nLanguages.findIndex(lang => currentPathname.startsWith(lang));
          if (currentLangIndex > -1) {
            // 当前属于多语言站点
            const absoluteLangIndex = i18nLanguages.findIndex(lang => absolutePathname.startsWith(lang));
            if (absoluteLangIndex === currentLangIndex) {
              // 同一语言站点，可以使用 pjax
              pjaxLinks.push(aLink);
            }
          } else {
            // 当前属于默认语言站点
            const absoluteLangIndex = i18nLanguages.findIndex(lang => absolutePathname.startsWith(lang));
            if (absoluteLangIndex === -1) {
              // 同一语言站点，可以使用 pjax
              pjaxLinks.push(aLink);
            }
          }
        }
        return pjaxLinks;
      }
    }
    window.Pjax && new window.Pjax({
      selectors: [
        "#header>img",
        "#header>picture",
        "head title",
        "#header-title",
        "#subtitle-wrap",
        "#main",
        "#content",
        ".sidebar-widget",
        ".sidebar-wrapper",
        '#mobile-nav',
        '#lazy-script',
        '#i18n-nav'
      ],
      switches: {
        "#content": function(oldEl, newEl) {
          // for sidebar change
          oldEl.className = newEl.className;
          this.onSwitch();
        },
        "#header-title": Pjax.switches.outerHTML,
        "#subtitle-wrap": Pjax.switches.outerHTML,
        "#main": function(oldEl, newEl) {
          const scripts = [...newEl.querySelectorAll('script')];
          loadScripts(scripts, 0);
          oldEl.outerHTML = newEl.outerHTML
          this.onSwitch()
        },
        "#mobile-nav": Pjax.switches.outerHTML,
        '#lazy-script': function(oldEl, newEl) {
          const scripts = [...newEl.querySelectorAll('script')];
          loadScripts(scripts, 0);
          oldEl.innerHTML = newEl.innerHTML
          this.onSwitch()
        },
      },
      cacheBust: false
    })
  </script>
  <%- js('js/pjax.js') %>
<% } %>

<% if (theme.live2d.enable) { %>
  <script>
    function initLive2d() {
      live2d.init("<%- vendorCdn(theme.vendor.js.live2d.base)[0] %>", {themeTipsPath: ""});
    }
  </script>
  <%- js({src: vendorCdn(theme.vendor.js.live2d.js)[0], onload: "initLive2d && initLive2d()", async: true})%>
<% } %>

<% if (theme.live2d_widgets.enable) { %>
  <%- js({src: vendorCdn(theme.vendor.js.live2d_widgets)[0], integrity: vendorCdnIntegrity(theme.vendor.js.live2d_widgets)[0], crossorigin: "anonymous"}) %>
<% } %>

<% if (theme.quicklink.enable) { %>
  <%- js({src: vendorCdn(theme.vendor.js.quicklink)[0], integrity: vendorCdnIntegrity(theme.vendor.js.quicklink)[0], crossorigin: "anonymous"}) %>
  <script data-pjax>
    window.quicklink?.listen({
      timeout: <%= theme.quicklink.timeout %>,
      priority: <%= theme.quicklink.priority %>,
      ignores: <%- JSON.stringify(theme.quicklink.ignores) %>
    });
  </script>
<% } %>

<div id="lazy-script">
  <div>
    <% if (post?.permalink) { %>
      <% let content = stripHtml(post.content).slice(0, 250).replace(/\s/g, " ") %>
      <% let excerpt = stripHtml(post.excerpt).replace(/\s/g, " ") %>
      <script data-pjax>
        window.REIMU_POST = {
          author: "<%= config.author %>",
          title: "<%= post.title %>",
          url: "<%= post.permalink %>",
          excerpt: "<%= excerpt %>",
          description: "<%= post.description %>",
          stripContent: "<%= content %>",
          date: "<%= post.date %>",
          updated: "<%= post.updated %>",
          cover: "<%- post.cover && !post.cover.startsWith('rgb') ? url_for(post.cover, {relative: false}) : url_for(theme.banner, {relative: false}) %>",
        };
      </script>
    <% } %>   
    <% if (theme.mermaid.enable && page.mermaid) { %>
      <%- js({src: vendorCdn(theme.vendor.js.mermaid)[0], integrity: vendorCdnIntegrity(theme.vendor.js.mermaid)[0], crossorigin: "anonymous", 'data-pjax': true}) %>
      <%- js({src: vendorCdn(theme.vendor.js.dompurify)[0], integrity: vendorCdnIntegrity(theme.vendor.js.dompurify)[0], crossorigin: "anonymous"}) %>
      <script data-pjax>
        if (window.mermaid) {
          // https://github.com/mermaid-js/mermaid/issues/1945
          const elementCode = '.mermaid'
          const saveOriginalData = () => {
            return new Promise((resolve, reject) => {
              try {
                let els = _$$(elementCode),
                    count = els.length;
                els.forEach(element => {
                  if (element.getAttribute('data-original-code') == null){
                    element.setAttribute('data-original-code', element.innerHTML)
                  }
                  count--
                  if(count == 0){
                    resolve()
                  }
                });
              } catch (error) {
              reject(error) 
              }
            })
          }
          const resetProcessed = () => {
            return new Promise((resolve, reject) => {
              try {
                let els = _$$(elementCode),
                    count = els.length;
                els.forEach(element => {
                  if(element.getAttribute('data-original-code') != null){
                    element.removeAttribute('data-processed')
                    element.innerHTML = DOMPurify.sanitize(element.getAttribute('data-original-code'))
                  }
                  count--
                  if(count == 0){
                    resolve()
                  }
                });
              } catch (error) {
              reject(error) 
              }
            })
          } 
          const loadMermaid = (theme) => {
            window.mermaid.initialize({theme})
            window.mermaid.init({theme}, _$$(elementCode))
          }
          document.body.addEventListener('dark-theme-set', () => {
            saveOriginalData()
            .then(resetProcessed())
            .then(loadMermaid('dark'))
            .catch(console.error)
          })
          document.body.addEventListener('light-theme-set', () => {
            saveOriginalData()
            .then(resetProcessed())
            .then(loadMermaid('default'))
            .catch(console.error)
          })
          if(localStorage.getItem('dark_mode') == 'true') {
            saveOriginalData()
            .then(resetProcessed())
            .then(loadMermaid('dark'))
            .catch(console.error)
          } else {
            saveOriginalData()
            .then(resetProcessed())
            .then(loadMermaid('default'))
            .catch(console.error)
          }
        }
      </script>
    <% } %>
    <% if (config.highlight.enable || config.syntax_highlighter === "highlight.js") { %>
      <% if (is_post() || is_page()) { %>
        <%- js({ src: "js/insert_highlight.js", "data-pjax": true }) %>
        <% if (Array.isArray(theme.share) && theme.share.includes("weixin")) { %>
          <%- js({src: vendorCdn(theme.vendor.js.html2image)[0], integrity: vendorCdnIntegrity(theme.vendor.js.html2image)[0], crossorigin: "anonymous", defer: true, 'data-pjax': true}) %>
          <%- js({src: vendorCdn(theme.vendor.js.qrcode)[0], integrity: vendorCdnIntegrity(theme.vendor.js.qrcode)[0], crossorigin: "anonymous", defer: true, 'data-pjax': true}) %>
        <% } %>
      <% } %>
    <% } %>
    <% if (is_post() || is_page()) { %>
      <script type="module" data-pjax>
        const PhotoSwipeLightbox = (await safeImport("<%- vendorCdn(theme.vendor.js.photoswipe_lightbox) %>", "<%- vendorCdnIntegrity(theme.vendor.js.photoswipe_lightbox) %>")).default;
        
        const pswp = () => {
          if (_$$('.article-entry a.article-gallery-item').length > 0) {
            new PhotoSwipeLightbox({
              gallery: '.article-entry',
              children: 'a.article-gallery-item',
              pswpModule: () => safeImport("<%- vendorCdn(theme.vendor.js.photoswipe) %>", "<%- vendorCdnIntegrity(theme.vendor.js.photoswipe) %>")
            }).init();
          }
          if(_$$('.article-gallery a.article-gallery-item').length > 0) {
            new PhotoSwipeLightbox({
              gallery: '.article-gallery',
              children: 'a.article-gallery-item',
              pswpModule: () => safeImport("<%- vendorCdn(theme.vendor.js.photoswipe) %>", "<%- vendorCdnIntegrity(theme.vendor.js.photoswipe) %>")
            }).init();
          }
          window.lightboxStatus = 'done';
          window.removeEventListener('lightbox:ready', pswp);
        }
        if(window.lightboxStatus === 'ready') {
          pswp()
        } else {
          window.addEventListener('lightbox:ready', pswp);
        }
      </script>
      <%- partial('post/comment', null, { cache: true }) %>
    <% } %>
  </div>
</div>

<%- copyright() %>
<%- outdate() %>

<% if (theme.footer.busuanzi) { %>
  <%- js({src: vendorCdn(theme.vendor.js.busuanzi)[0], integrity: vendorCdnIntegrity(theme.vendor.js.busuanzi)[0], crossorigin: "anonymous", async: true}) %>
<% } %>

<% if (theme.service_worker.enable) { %>
  <%- js('js/service_worker.js') %>
<% } else { %>
<script>
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.getRegistrations().then((registrations) => {
      for (let registration of registrations) {
        registration.unregister();
      }
    });
  }
</script>
<% } %>

<% if (theme.math.enable) { %>
  <% if (theme.math.katex.enable && theme.math.katex.autoRender) { %>
    <%- js({src: vendorCdn(theme.vendor.js.katex)[0], integrity: vendorCdnIntegrity(theme.vendor.js.katex)[0], crossorigin: "anonymous", defer: true, 'data-pjax': true}) %>
    <%- js({src: vendorCdn(theme.vendor.js.katex_auto_render)[0], integrity: vendorCdnIntegrity(theme.vendor.js.katex_auto_render)[0], crossorigin: "anonymous", defer: true, onload: "renderMathInElement(_$('article'), {delimiters: [{left: '$$', right: '$$', display: true},{left: '$', right: '$', display: false}]});", 'data-pjax': true}) %>
  <% } else if (theme.math.mathjax.enable) { %>
    <%- js({src: vendorCdn(theme.vendor.js.mathjax)[0], integrity: vendorCdnIntegrity(theme.vendor.js.mathjax)[0], crossorigin: "anonymous", defer: true, 'data-pjax': true}) %>
    <script data-pjax>
      window.MathJax = <%- JSON.stringify(theme.math.mathjax.options) %>;
    </script>
  <% } %>
<% } %>

<% if (theme.player.aplayer.enable) { %>
  <%- js({src: vendorCdn(theme.vendor.js.aplayer)[0], integrity: vendorCdnIntegrity(theme.vendor.js.aplayer)[0], crossorigin: "anonymous"}) %>
  <% if (!theme.player.meting.enable) { %>
    <script>
      const ap = new APlayer({
        theme: "var(--color-link)",
        container: document.getElementById('aplayer'),
        audio: <%- JSON.stringify(theme.player.aplayer.options.audio) %> || [],
        fixed: <%= JSON.stringify(theme.player.aplayer.options.fixed) %> || false,
        autoplay: <%= JSON.stringify(theme.player.aplayer.options.autoplay) %> || false,
        loop: '<%= theme.player.aplayer.options.loop %>' || 'all',
        order: '<%= theme.player.aplayer.options.order %>' || 'list',
        preload: '<%= theme.player.aplayer.options.preload %>' || 'auto',
        volume: <%= JSON.stringify(theme.player.aplayer.options.volume) %> || 0.7,
        mutex: <%= JSON.stringify(theme.player.aplayer.options.mutex) %> || true,
        listFolded: <%= JSON.stringify(theme.player.aplayer.options.listFolded) %> || false,
        lrcType: <%= JSON.stringify(theme.player.aplayer.options.lrcType) %> || 0,
      });
    </script>
  <% } %>
<% } %>

<% if (theme.player.meting.enable) { %>
  <%- js({src: vendorCdn(theme.vendor.js.meting)[0], integrity: vendorCdnIntegrity(theme.vendor.js.meting)[0], crossorigin: "anonymous"}) %>
  <% if (theme.player.meting.meting_api) { %>
    <script>
      var meting_api = "<%= theme.player.meting.meting_api %>";
    </script>
  <% } %>
<% } %>

<% if (theme.pangu.enable) { %>
  <%- js({src: vendorCdn(theme.vendor.js.pangu)[0], integrity: vendorCdnIntegrity(theme.vendor.js.pangu)[0], crossorigin: "anonymous", defer: true}) %>
  <script data-pjax>
    if (document.readyState === "loading") {
      document.addEventListener('DOMContentLoaded', () => {
        pangu?.spacingPage();
      });
    } else {
      pangu?.spacingPage();
    }
  </script>
<% } %>