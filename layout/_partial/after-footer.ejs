<%- js({ src: vendorCdn(theme.vendor.js.lazysizes)[0], integrity: vendorCdnIntegrity(theme.vendor.js.lazysizes)[0], crossorigin: "anonymous"}) %>
<%- js({ src: vendorCdn(theme.vendor.js.clipboard)[0], integrity: vendorCdnIntegrity(theme.vendor.js.clipboard)[0], crossorigin: "anonymous"}) %>

<%_ if (theme.material_theme.enable) { _%>
  <%- js({src: vendorCdn(theme.vendor.js.material_theme)[0], integrity: vendorCdnIntegrity(theme.vendor.js.material_theme)[0], crossorigin: "anonymous"}) %>
<%_ } _%>

<%- js(url_for('js/script.js')) %>

<%_ if (theme.animation.enable) { _%>
  <%- js(url_for('js/aos.js')) %>
  <script>
    var aosInit = () => {
      AOS.init({
        duration: 1000,
        easing: "ease",
        once: true,
        offset: 50,
      });
    };
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', aosInit);
    } else {
      aosInit();
    }
  </script>
<%_ } _%>

<%- js({src: url_for('js/pjax_script.js'), 'data-pjax': true}) %>

<%_ if (theme.generator_search.enable) { _%>
  <%- js({src: url_for('js/generator_search.js'), defer: true}) %>
<%_ } _%>

<%_ if (theme.algolia_search.enable) { _%>
  <script>
    var ALGOLIA_CONFIG = {
      logo: "<%- url_for('/images/algolia_logo.svg', { relative: false }) %>",
      algolia: {
        applicationID: "<%= config.algolia.appId %>",
        apiKey: "<%= config.algolia.apiKey %>",
        indexName: "<%= config.algolia.indexName %>",
        hits: {
          "per_page": parseInt("<%= theme.algolia_search.hits.per_page %>")
        },
        labels: {
          "input_placeholder": "<%= __('algolia.input_placeholder') %>",
          "hits_empty": "<%= __('algolia.hits_empty') %>",
          "hits_stats": "<%= __('algolia.hits_stats') %>"
        }
      }
    };
  </script>
  <%- js({src: vendorCdn(theme.vendor.js.algolia)[0], integrity: vendorCdnIntegrity(theme.vendor.js.algolia)[0], crossorigin: "anonymous", defer: true}) %>
  <%- js({src: vendorCdn(theme.vendor.js.instantsearch)[0], integrity: vendorCdnIntegrity(theme.vendor.js.instantsearch)[0], crossorigin: "anonymous", defer: true}) %>
  <%- js({src: 'js/algolia_search.js', defer: true}) %>
<%_ } _%>

<%_ if (theme.firework.enable) { _%>
  <%- js({src: vendorCdn(theme.vendor.js.firework)[0], integrity: vendorCdnIntegrity(theme.vendor.js.firework)[0], crossorigin: "anonymous"}) %>
  <script>
    window.firework && window.firework(JSON.parse('<%- JSON.stringify(theme.firework.options) %>'))
  </script>
<%_ } _%>

<%_ if (theme.pjax.enable) { _%>
  <%- js({src: vendorCdn(theme.vendor.js.pjax)[0], integrity: vendorCdnIntegrity(theme.vendor.js.pjax)[0], crossorigin: "anonymous"}) %>
  <%- js(url_for('js/pjax.js')) %>
<%_ } _%>

<%_ if (theme.live2d.enable) { _%>
  <script>
    function initLive2d() {
      live2d.init("<%- vendorCdn(theme.vendor.js.live2d.base)[0] %>", {themeTipsPath: ""});
    }
  </script>
  <%- js({src: vendorCdn(theme.vendor.js.live2d.js)[0], onload: "initLive2d && initLive2d()", async: true})%>
<%_ } _%>

<%_ if (theme.live2d_widgets.enable) { _%>
  <%- js({src: vendorCdn(theme.vendor.js.live2d_widgets)[0], integrity: vendorCdnIntegrity(theme.vendor.js.live2d_widgets)[0], crossorigin: "anonymous"}) %>
<%_ } _%>

<%_ if (theme.quicklink.enable) { _%>
  <%- js({src: vendorCdn(theme.vendor.js.quicklink)[0], integrity: vendorCdnIntegrity(theme.vendor.js.quicklink)[0], crossorigin: "anonymous"}) %>
  <script data-pjax>
    window.quicklink?.listen({
      timeout: <%= theme.quicklink.timeout %>,
      priority: <%= theme.quicklink.priority %>,
      ignores: <%- JSON.stringify(theme.quicklink.ignores) %>
    });
  </script>
<%_ } _%>

<div id="lazy-script">
  <div>
    <%_ if (post?.permalink) { _%>
      <% let content = stripHtml(post.content).slice(0, 250).replace(/\s/g, " ") %>
      <% let excerpt = stripHtml(post.excerpt).replace(/\s/g, " ") %>
      <script data-pjax>
        window.REIMU_POST = {
          author: "<%= post.author || config.author %>",
          title: "<%= post.title %>",
          url: "<%= post.permalink %>",
          excerpt: "<%= excerpt %>",
          description: "<%= post.description %>",
          stripContent: "<%= content %>",
          date: "<%= post.date %>",
          updated: "<%= post.updated %>",
          cover: "<%- post.cover && !post.cover.startsWith('rgb') ? url_for(post.cover, {relative: false}) : url_for(theme.banner, {relative: false}) %>",
        };
      </script>
    <%_ } _%>   
    <%_ if (theme.mermaid.enable && page.mermaid) { _%>
      <%- js({src: vendorCdn(theme.vendor.js.mermaid)[0], integrity: vendorCdnIntegrity(theme.vendor.js.mermaid)[0], crossorigin: "anonymous", 'data-pjax': true}) %>
      <%- js({src: vendorCdn(theme.vendor.js.dompurify)[0], integrity: vendorCdnIntegrity(theme.vendor.js.dompurify)[0], crossorigin: "anonymous"}) %>
      <%_ if (theme.mermaid.zoom) { _%>
        <%- js({src: vendorCdn(theme.vendor.js.svg_pan_zoom)[0], integrity: vendorCdnIntegrity(theme.vendor.js.svg_pan_zoom)[0], crossorigin: "anonymous"}) %>
      <%_ } _%>
      <script data-pjax>
        if (window.mermaid) {
          // https://github.com/mermaid-js/mermaid/issues/1945
          const elementCode = '.mermaid'
          const processElements = (callback) => {
            const els = _$$(elementCode);
            if (!els.length) return Promise.resolve();
            
            return new Promise((resolve, reject) => {
              try {
                els.forEach(callback);
                resolve();
              } catch (error) {
                reject(error);
              }
            });
          };
          const saveOriginalData = () => processElements(el => {
            if (!el.getAttribute('data-original-code')) {
              el.setAttribute('data-original-code', el.innerHTML);
            }
          });

          const resetProcessed = () => processElements(el => {
            const originalCode = el.getAttribute('data-original-code');
            if (originalCode) {
              el.removeAttribute('data-processed');
              el.innerHTML = DOMPurify.sanitize(originalCode);
            }
          });
          const loadMermaid = async (theme) => {
            window.mermaid.initialize({theme, startOnLoad: false})
            await window.mermaid.run({querySelector: elementCode, suppressErrors: true})
            if (window.svgPanZoom) {
              window.__panZoomList?.forEach(panZoom => {try {panZoom.destroy()} catch {}});
              window.__panZoomList = [];
              _$$('.mermaid > svg').forEach(el => {
                const bbox = el.getBBox();
                el.setAttribute('height', Math.max(bbox.height, 80));
                window.__panZoomList.push(window.svgPanZoom(el, {
                  zoomEnabled: true,
                  controlIconsEnabled: true,
                  fit: true,
                  center: true
                }));
              });
              if (window.__resizeMermaidSvg) {
                window.removeEventListener('resize', window.__resizeMermaidSvg);
              }
              window.__resizeMermaidSvg = () => {
                try {
                  window.__panZoomList.forEach(panZoom => {
                    panZoom.resize();
                    panZoom.fit();
                    panZoom.center();
                  });
                } catch {
                  window.removeEventListener('resize', window.__resizeMermaidSvg);
                  window.__panZoomList = [];
                }
              }
              window.addEventListener('resize', window.__resizeMermaidSvg);
            }
          }
          const initMermaid = async (theme) => {
            try {
              await saveOriginalData();
              await resetProcessed();
              await loadMermaid(theme);
            } catch (error) {
              console.error(error);
            }
          };
          
          document.body.addEventListener('dark-theme-set', () => initMermaid('dark'));
          document.body.addEventListener('light-theme-set', () => initMermaid('default'));

          const mode = localStorage.getItem('dark_mode');
          if (mode === 'auto') {
            const osMode = window.matchMedia("(prefers-color-scheme: dark)").matches;
            initMermaid(osMode ? 'dark' : 'default');
          } else {
            initMermaid(mode === 'true' ? 'dark' : 'default');
          }
        }
      </script>
    <%_ } _%>
    <%_ if (config.highlight.enable || config.syntax_highlighter === "highlight.js") { _%>
      <%_ if (is_post() || is_page()) { _%>
        <%- js({ src: url_for("js/insert_highlight.js"), "data-pjax": true }) %>
        <%_ if (Array.isArray(theme.share) && theme.share.includes("weixin")) { _%>
          <%- js({src: vendorCdn(theme.vendor.js.snapdom)[0], integrity: vendorCdnIntegrity(theme.vendor.js.snapdom)[0], crossorigin: "anonymous", defer: true, 'data-pjax': true}) %>
          <%- js({src: vendorCdn(theme.vendor.js.qrcode)[0], integrity: vendorCdnIntegrity(theme.vendor.js.qrcode)[0], crossorigin: "anonymous", defer: true, 'data-pjax': true}) %>
        <%_ } _%>
      <%_ } _%>
    <%_ } _%>
    <%_ if (is_post() || is_page()) { _%>
      <script type="module" data-pjax>
        const PhotoSwipeLightbox = (await safeImport("<%- vendorCdn(theme.vendor.js.photoswipe_lightbox) %>", "<%- vendorCdnIntegrity(theme.vendor.js.photoswipe_lightbox) %>")).default;
        const initPswp = (gallery, children) => {
          if (_$$(`${gallery} ${children}`).length > 0) {
            new PhotoSwipeLightbox({
              gallery,
              children,
              pswpModule: () => safeImport("<%- vendorCdn(theme.vendor.js.photoswipe) %>", "<%- vendorCdnIntegrity(theme.vendor.js.photoswipe) %>")
            }).init();
          }
        }
        const pswp = () => {
          initPswp('.article-entry', 'a.article-gallery-item');
          initPswp('.article-gallery', 'a.article-gallery-item');
          window.lightboxStatus = 'done';
          window.removeEventListener('lightbox:ready', pswp);
        }
        if(window.lightboxStatus === 'ready') {
          pswp()
        } else {
          window.addEventListener('lightbox:ready', pswp);
        }
      </script>
      <%_ if (page.comments !== false) { _%>
        <%- partial('post/comment', null, { cache: true }) %>
      <%_ } _%>
    <%_ } _%>
  </div>
</div>

<%- copyright() %>
<%- outdate() %>

<%_ if (theme.footer.busuanzi) { _%>
  <%- js({src: vendorCdn(theme.vendor.js.busuanzi)[0], integrity: vendorCdnIntegrity(theme.vendor.js.busuanzi)[0], crossorigin: "anonymous", async: true}) %>
<%_ } _%>

<%_ if (theme.service_worker.enable) { _%>
  <%- js(url_for('js/service_worker.js')) %>
<%_ } else { _%>
<script>
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.getRegistrations().then((registrations) => {
      for (let registration of registrations) {
        registration.unregister();
      }
    });
  }
</script>
<%_ } _%>

<%_ if (theme.math.enable) { _%>
  <%_ if (theme.math.katex.enable && theme.math.katex.autoRender) { _%>
    <%- js({src: vendorCdn(theme.vendor.js.katex)[0], integrity: vendorCdnIntegrity(theme.vendor.js.katex)[0], crossorigin: "anonymous", defer: true, 'data-pjax': true}) %>
    <%- js({src: vendorCdn(theme.vendor.js.katex_auto_render)[0], integrity: vendorCdnIntegrity(theme.vendor.js.katex_auto_render)[0], crossorigin: "anonymous", defer: true, onload: "renderMathInElement(_$('article'), {delimiters: [{left: '$$', right: '$$', display: true},{left: '$', right: '$', display: false}]});", 'data-pjax': true}) %>
  <% } else if (theme.math.mathjax.enable) { %>
    <%- js({src: vendorCdn(theme.vendor.js.mathjax)[0], integrity: vendorCdnIntegrity(theme.vendor.js.mathjax)[0], crossorigin: "anonymous", defer: true, 'data-pjax': true}) %>
    <script data-pjax>
      window.MathJax = <%- JSON.stringify(theme.math.mathjax.options) %>;
    </script>
  <%_ } _%>
<%_ } _%>

<%_ if (theme.player.aplayer.enable) { _%>
  <%- js({src: vendorCdn(theme.vendor.js.aplayer)[0], integrity: vendorCdnIntegrity(theme.vendor.js.aplayer)[0], crossorigin: "anonymous"}) %>
  <%_ if (!theme.player.meting.enable) { _%>
    <script>
      if (window.matchMedia('(max-width: 959px)').matches) {
      const aplayer = _$('#aplayer');
        if (aplayer) {
          const aside = aplayer.parentNode?.parentNode;
          if (aside?.tagName === 'ASIDE') {
            aplayer.removeAttribute('data-aos');
            aplayer.parentNode.removeChild(aplayer);
            document.body.appendChild(aplayer);
          }
        }
      }
      const ap = new APlayer({
        theme: "var(--color-link)",
        container: document.getElementById('aplayer'),
        audio: <%- JSON.stringify(theme.player.aplayer.options.audio) %> || [],
        fixed: isMobile ? true : (<%= JSON.stringify(theme.player.aplayer.options.fixed) %> || false),
        autoplay: <%= JSON.stringify(theme.player.aplayer.options.autoplay) %> || false,
        loop: '<%= theme.player.aplayer.options.loop %>' || 'all',
        order: '<%= theme.player.aplayer.options.order %>' || 'list',
        preload: '<%= theme.player.aplayer.options.preload %>' || 'auto',
        volume: <%= JSON.stringify(theme.player.aplayer.options.volume) %> || 0.7,
        mutex: <%= JSON.stringify(theme.player.aplayer.options.mutex) %> || true,
        listFolded: <%= JSON.stringify(theme.player.aplayer.options.listFolded) %> || false,
        lrcType: <%= JSON.stringify(theme.player.aplayer.options.lrcType) %> || 0,
      });
    </script>
  <%_ } _%>
<%_ } _%>

<%_ if (theme.player.meting.enable) { _%>
  <%_ if (theme.player.meting.meting_api) { _%>
    <script>
      var meting_api = "<%- theme.player.meting.meting_api %>";
    </script>
  <%_ } _%>
  <script>
    if (window.matchMedia('(max-width: 959px)').matches) {
      const meting = _$('meting-js');
      if (meting) {
        meting.setAttribute('fixed', 'true');
        const aside = meting.parentNode?.parentNode;
        if (aside?.tagName === 'ASIDE') {
          meting.parentNode.removeChild(meting);
          document.body.appendChild(meting);
        }
      }
    }
  </script>
  <%- js({src: vendorCdn(theme.vendor.js.meting)[0], integrity: vendorCdnIntegrity(theme.vendor.js.meting)[0], crossorigin: "anonymous"}) %>
<%_ } _%>

<%_ if (theme.pangu.enable) { _%>
  <%- js({src: vendorCdn(theme.vendor.js.pangu)[0], integrity: vendorCdnIntegrity(theme.vendor.js.pangu)[0], crossorigin: "anonymous", defer: true}) %>
  <script data-pjax>
    if (document.readyState === "loading") {
      document.addEventListener('DOMContentLoaded', () => {
        pangu?.spacingPage();
      });
    } else {
      pangu?.spacingPage();
    }
  </script>
<%_ } _%>